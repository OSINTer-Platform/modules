from .objects import FullArticle

from string import Template

default_template = """# $title
## $description
## Information:

+ Link: $url
+ Source: $source
+ Author: $author
+ Date published: $publish_date
+ Date scraped: $scrape_date

## Article:
![Main article image]($image_url)

$formatted_content

## Tags:
$technical_tags

### Autogenerated tags:
$auto_tags
"""

default_templater = Template(default_template)


def article_to_md(article: FullArticle) -> str:
    return default_templater.substitute(**generate_substitution_mapping(article))


def generate_substitution_mapping(article: FullArticle) -> dict[str, str]:
    technical_tags: str = ""
    auto_tags: str = ""

    if "interresting" in article.tags:
        technical_tag_lists = [
            f"***{tag_name}***: {' '.join(tag_container)}"
            for tag_name, tag_container in article.tags["interresting"].items()
        ]
        technical_tags = "\n".join(technical_tag_lists)

    if "automatic" in article.tags and len(article.tags["automatic"]) > 0:
        auto_tags = "[[" + "]] [[".join(article.tags["automatic"]) + "]]"

    return {
        "title": article.title,
        "description": article.description,
        "url": str(article.url),
        "image_url": str(article.image_url),
        "source": article.source,
        "author": article.author or article.source,
        "publish_date": article.publish_date.strftime("%d %B %Y, %H:%M"),
        "scrape_date": article.inserted_at.strftime("%d %B %Y, %H:%M"),
        "formatted_content": article.formatted_content,
        "raw_content": article.content,
        "technical_tags": technical_tags,
        "auto_tags": auto_tags,
    }
